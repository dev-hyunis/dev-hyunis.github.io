[ { "title": "Odoo 시퀀스 번호를 생성 및 변경하는 방법", "url": "/posts/how-to-create-sequence-number-in-odoo/", "categories": "Odoo, docs", "tags": "odoo, views, sequence", "date": "2023-05-06 15:40:00 +0900", "snippet": "요구사항매출 문서의 경우 문서 번호가 S00001 로 S 는 구분자, 00001 은 시퀀스 형식으로 생성된다.이를 SO230400001 로 SO (구분자), 2304 (년월), 00001 (시퀀스)로 변경하고 싶다면 새로운 시퀀스를 생성해주면 된다.해결방안#1기존 매출 시퀀스를 보면 아래와 같이 정의되어있다. code: 시퀀스 코드 prefix: 구분자 padding: 시퀀스 크기이외에도 설정 &amp;gt; 기술 &amp;gt; 시퀀스 및 식별자 &amp;gt; 시퀀스 에서 다양한 속성들을 볼 수 있다.&amp;lt;data noupdate=&quot;1&quot;&amp;gt; &amp;lt;record id=&quot;seq_sale_order&quot; model=&quot;ir.sequence&quot;&amp;gt; &amp;lt;field name=&quot;name&quot;&amp;gt;Sales Order&amp;lt;/field&amp;gt; &amp;lt;field name=&quot;code&quot;&amp;gt;sale.order&amp;lt;/field&amp;gt; &amp;lt;field name=&quot;prefix&quot;&amp;gt;S&amp;lt;/field&amp;gt; &amp;lt;field name=&quot;padding&quot;&amp;gt;5&amp;lt;/field&amp;gt; &amp;lt;field name=&quot;company_id&quot; eval=&quot;False&quot;/&amp;gt; &amp;lt;/record&amp;gt;&amp;lt;/data&amp;gt;코드에서 &amp;lt;data noupdate=&quot;1&quot;&amp;gt; 라는 속성을 보면 시퀀스가 생성된 이후 모듈 업그레이드를 하더라도 변경되지 않는다는 뜻이다.따라서 해당 시퀀스를 상속해서 수정하더라도 변경되지 않는다.#2data 폴더를 만들고 ir_sequence_data.xml 파일을 생성한다. code: 기존 판매 규칙과 구분될 수 있도록 new 라는 단어를 붙였다. prefix: SO 구분자로 변경하고 %(y)s%(month)s 날짜를 넣어주었다.&amp;lt;!-- SO230400001 형식의 새로운 문서 규칙 생성 --&amp;gt;&amp;lt;record id=&quot;seq_new_sale_order&quot; model=&quot;ir.sequence&quot;&amp;gt; &amp;lt;field name=&quot;name&quot;&amp;gt;New Sales Order&amp;lt;/field&amp;gt; &amp;lt;field name=&quot;code&quot;&amp;gt;new.sale.order&amp;lt;/field&amp;gt; &amp;lt;field name=&quot;prefix&quot;&amp;gt;SO%(y)s%(month)s&amp;lt;/field&amp;gt; &amp;lt;field name=&quot;padding&quot;&amp;gt;5&amp;lt;/field&amp;gt; &amp;lt;field name=&quot;company_id&quot; eval=&quot;False&quot;/&amp;gt;&amp;lt;/record&amp;gt;prefix 에 입력한 날짜는 설정 &amp;gt; 기술 &amp;gt; 시퀀스 및 식별자 &amp;gt; 시퀀스 메뉴로 이동하여 범례(접두사, 접미사용) 정보에서 찾아볼 수 있다.2자리 년도와 월에 대한 정보가 필요하기 때문에 %(y)s%(month)s 이렇게 사용했다.#3이제 시퀀스를 생성하였다면 새로운 시퀀스를 적용할 수 있도록 create 메소드를 수정해야한다.기존 메소드if vals.get(&#39;name&#39;, _(&quot;New&quot;)) == _(&quot;New&quot;): 라는 조건이 있기 때문에 코드를 그대로 복사해와서 수정하지 않고 name 만 새롭게 설정해주도록 한다.@api.model_create_multidef create(self, vals_list): for vals in vals_list: if &#39;company_id&#39; in vals: self = self.with_company(vals[&#39;company_id&#39;]) if vals.get(&#39;name&#39;, _(&quot;New&quot;)) == _(&quot;New&quot;): seq_date = fields.Datetime.context_timestamp( self, fields.Datetime.to_datetime(vals[&#39;date_order&#39;]) ) if &#39;date_order&#39; in vals else None vals[&#39;name&#39;] = self.env[&#39;ir.sequence&#39;].next_by_code( &#39;sale.order&#39;, sequence_date=seq_date) or _(&quot;New&quot;) return super().create(vals_list)상속된 메소드여기서 .next_by_code(&#39;sale.order&#39;) → .next_by_code(&#39;new.sale.order&#39;) 로 새로운 시퀀스를 적용하도록 수정해주었다.@api.model_create_multidef create(self, vals_list): for vals in vals_list: if vals.get(&#39;name&#39;, _(&quot;New&quot;)) == _(&quot;New&quot;): seq_date = fields.Datetime.context_timestamp( self, fields.Datetime.to_datetime(vals[&#39;date_order&#39;]) ) if &#39;date_order&#39; in vals else None vals[&#39;name&#39;] = self.env[&#39;ir.sequence&#39;].next_by_code( &#39;new.sale.order&#39;, sequence_date=seq_date) or _(&quot;New&quot;) return super(SaleOrder, self).create(vals_list)#4모듈 업그레이드 후 판매 문서를 작성해보니 새로운 시퀀스가 적용되었다.마치며, 🙇🏻참고한 사이트Blog How to Create Sequence Number in Odoo 15" }, { "title": "Odoo 개발 가이드라인", "url": "/posts/odoo-coding-guidelines/", "categories": "Odoo, docs", "tags": "odoo, guideline", "date": "2023-05-01 09:00:00 +0900", "snippet": "오두 Odoo문서에 작성된 내용 외에는 Odoo의 Coding Guideline을 따른다.Coding guidelines — Odoo 16.0 documentationManifest 파일모듈명모듈명_프로젝트명 형식으로 작성한다.ex) purchase_ssk, stock_hlb, mrp_scs버전 VersionOdoo 버전.Release 버전.Deploy 버전 형식으로 작성한다.ex) 16.0.1, 16.1.3, 16.3.11 Odoo 버전 Odoo 버전으로 업데이트 X Release 버전 버그가 없고 안정화된 버전일 경우 업데이트 Deploy 버전 서버 배포 시 버전 업데이트주석 Comment플러그인 GitToolBoxPycharm에서 GitToolBox 플러그인을 설치하면 코드 라인 클릭 시, 해당 코드를 누가 작성(Commit)했는지 알 수 있어 이니셜과 작성 일자를 주석으로 남기지 않아도 된다.GitToolBox - IntelliJ IDEs Plugin파이썬 Docstring파이썬에서 메소드(함수) 주석은 Docstring으로 작성한다.@api.depends(&#39;purchase_order_id&#39;, &#39;mrp_production_id&#39;)def _compute_is_link(self): &quot;&quot;&quot; 연결된 주문 명세인지 계산 &quot;&quot;&quot; for line in self: line.is_link = line.purchase_order_id or line.mrp_production_id Docstring이란Python에 있어서 클래스 또는 메소드(함수)에 대한 설명을 기재한 주석이다.https://wikidocs.net/16050자바스크립트 JSDoc자바스크립트에서 메소드(함수) 주석은 JSDoc로 작성한다./** * 두 숫자를 더하는 함수 * @param {number} a 첫 번째 숫자 * @param {number} b 두 번째 숫자 * @returns a + b 의 결과를 반환 */addNum(a, b) { return a + b;} JSDoc이란Javascript에 있어서 클래스 또는 메소드(함수)에 대한 설명을 기재한 주석이다.https://jsdoc.app/Git문서에 작성된 내용 외에는 Odoo의 Git Guideline을 따른다.Git guidelines — Odoo 16.0 documentation브랜치 Branch main Default 브랜치 develop 개발 release 서버 배포 hotfix 배포 후 수정이 필요한 오류Git Flow커밋 Message태그 Tag [ADD] 코드 추가 [MOD] 코드 수정 [FIX] 버그 / 오류 수정 [REM] 코드 제거 [REF] 코드 리팩토링 [REV] 코드 Revert [MOV] 파일 이동 [IMP] 코드 개선 [MERGE] 코드 Merge [I18N] 번역 파일 변경커밋 Message[Tag] Module: Message 형식으로 작성한다.# Baddev: 출고 요청 버튼 추가 및 버튼 클릭시 confirm 메세지 표시fix: 전공정 실적 조회 성형, 검사 공정 데이터 생성 오류 수정trans: 품질 검사 수량이 없을 경우 오류 메세지 번역 추가# Good[ADD] stock_module: 출고 요청 버튼 추가 및 버튼 클릭시 confirm 메세지 표시[FIX] mrp_module: 전공정 실적 조회 성형, 검사 공정 데이터 생성 오류 수정[I18N] quality_control_module: 품질 검사 수량이 없을 경우 오류 메세지 번역 추가 수정한 모듈이 여러 개일 경우수정한 모듈 중에서 기능의 중심이 되는 모듈명을 적는다.PR(Pull Request)코드 리뷰가 필요하지 않은 간단한 개발의 경우, 담당자의 판단에 따라 테스트 및 리뷰 없이 Merge 할 수 있다.ex) 번역, 필드 추가 등제목 Title커밋 Message 작성 형식과 동일하게 [Tag] Module: Message 으로 작성한다.# Baddev: Sale Module# Good[ADD] sale_management_module: 매출 견적서 S20230500001 형식의 새로운 문서 규칙 생성 수정한 모듈이 여러 개일 경우수정한 모듈 중에서 기능의 중심이 되는 모듈명을 적는다.내용 Content with Template내용 작성 방식이 조금씩 다르기 때문에 Github 템플릿 기능을 활용하여 템플릿을 지정해 사용한다.## 모듈## 작업사항## 테스트 방법## 이슈Issue and Pull Request templates작성 예시## 모듈- sale_management_module## 작업사항- 매출 견적서 S20230500001 형식의 새로운 문서 규칙 생성## 테스트 방법1. 매출 견적서 문서 생성시 (S00001 -&amp;gt; S20230500001) 로 문서명이 생성되는지 확인## 이슈리뷰어 ReviewerPR 작성자는 Reviewer에 프로젝트 별 업무 / 기술 담당자를 지정한다. 업무 담당자는 테스트를 진행한다. 기술 담당자는 코드 리뷰를 진행하고 Merge 한다.담당자 AssigneesPR 작성자는 Assignees에 PR 작업을 개발한 담당자를 지정한다. 여러 명이서 같이 개발한 경우, 개발한 팀원을 모두 지정한다.라벨 Labels라벨은 프로젝트 별 업무 / 기술 담당자가 리뷰 완료 시에 변경한다. Simple 코드 리뷰가 필요하지 않은 간단한 개발의 경우 (ex. 번역, 필드 추가) Test Review 업무 담당자가 테스트를 완료한 경우 (문제가 없는 상태) Code Review 기술 담당자가 코드 리뷰를 완료한 경우 (문제가 없는 상태)" }, { "title": "개발자를 위한 Mac 초기 설정하기", "url": "/posts/mac-setup-for-developers/", "categories": "Etc, docs", "tags": "macbook, setup, developer", "date": "2023-02-06 07:00:00 +0900", "snippet": "시스템 환경설정단축키입력 소스키보드 &amp;gt; 단축키 &amp;gt; 입력 소스 : Command + SpaceSpotlight키보드 &amp;gt; 단축키 &amp;gt; Spotlight : Control + Space트랙패드손쉬운 사용 &amp;gt; 포인트 제어기 &amp;gt; 마우스와 트랙패드 &amp;gt; 트랙패드 옵션 &amp;gt; 드래그 활성화 : 세 손가락으로 드래그하기홈브류(Homebrew)홈브류는 macOS 용 패키지 관리 애플리케이션입니다.터미널에서 패키지를 쉽게 설치, 제거할 수 있어 홈브류로 설치 가능한 패키지는 홈브류로 설치합니다./bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;👉 홈브류(Homebrew)란?프로그램 설치 ⭐️ 가 붙은 패키지는 필수로 설치해야 하는 패키지입니다. 그 외 패키지는 필요에 맞춰 설치하세요!GitGit ⭐️brew install gitSourcetreeSourcetree가 아닌 Github Desktop, GitKraken 등 다른 GUI 프로그램을 설치하셔도 됩니다.brew install --cask sourcetreeIDLEJetbrains Toolbox ⭐️brew install --cask jetbrains-toolboxVisual Studio Codebrew install --cask visual-studio-code브라우저Google Chrome ⭐️brew install --cask google-chromeMicrosoft Edgebrew install --cask microsoft-edge문서 작성Microsoft Office ⭐️brew install --cask microsoft-office화면 분할Magnet (유료)https://apps.apple.com/kr/app/magnet-마그넷/id441258766?mt=12Rectangle (무료)brew install --cask rectangle기타iTerm2 ⭐️brew install --cask iterm2Slack ⭐️brew install --cask slackPostmanbrew install --cask postmanKekabrew install --cask keka" }, { "title": "Odoo 서버에 소스 코드 배포하기", "url": "/posts/how-to-deploy-source-code-to-odoo-server/", "categories": "Odoo, docs", "tags": "odoo, server, deploy", "date": "2022-12-06 11:00:00 +0900", "snippet": " SSK 프로젝트를 기준으로 작성되었습니다.데이터베이스 backup소스 코드를 배포하기 전에 기존 데이터베이스를 backup 해주세요.배포 후 문제가 발생하면 backup 해둔 데이터베이스로 restore 하기 위해 꼭 필요합니다. ⭐️서버 접속keypair 파일 권한 변경$ chmod 400 {keypair 파일}$ chmod 400 keypair_odoo_demo.pemSSH 서버 접속$ ssh -i {keypair 파일} ubuntu@{서버 주소}$ ssh -i keypair_odoo_demo.pem ubuntu@ssk.hyunerp.com소스 코드 배포사용자 전환ubuntu@ip-172-31-31-99:~$ sudo su - odoo디렉토리 이동odoo@ip-172-31-31-99:~$ cd odooCmm{버전}/config/addons/{레포지토리 이름}/odoo@ip-172-31-31-99:~$ cd odooCmm14/config/addons/krodoo-ssk/소스 코드 다운로드odoo@ip-172-31-31-99:~/odooCmm14/config/addons/krodoo-ssk$ git pullUsername for &#39;https://github.com&#39;: {Github 아이디}Password for &#39;https://parkbohee@github.com&#39;: {Github Token}Token이 없는 경우에 아래 링크를 참고해 Token을 발급받아 주세요.👉 깃헙(GitHub)에서 개인용 접근 토큰 생성서버 재실행사용자 로그아웃odoo@ip-172-31-31-99:~/odooCmm14/config/addons/krodoo-ssk$ exit서비스 재실행ubuntu@ip-172-31-31-99:~$ sudo systemctl restart odoo.service서비스 상태 확인ubuntu@ip-172-31-31-99:~$ sudo systemctl status odoo.service서비스가 정상적으로 실행된 경우 아래와 같이 나타납니다.모듈 업그레이드관리자 계정으로 로그인해 소스 코드가 변경된 모듈은 모듈 업그레이드를 해주세요." }, { "title": "서버에서 API 문서가 보이지 않는 경우", "url": "/posts/api-document-cannot-be-viewed-on-the-server/", "categories": "Odoo, issue", "tags": "odoo, issue, server, api", "date": "2022-10-27 09:00:00 +0900", "snippet": "이슈서버에서 API 문서가 보이지 않는 경우에 대한 해결 방안입니다.원인은 http 서버에서는 정상적으로 보이지만 ssl 이 적용된 https 서버에서 오류가 발생합니다.해결 방안#1설정 &amp;gt; 기술 &amp;gt; 매개 변수 &amp;gt; 시스템 매개 변수 을 클릭합니다.⚠️  기술 메뉴가 보이지 않을시 odoo debug 모드를 활성화합니다.#2base_url 을 검색한 후 web.base_url 정보를 클릭합니다.#3web.base_url 값이 서버 주소로 설정되어있는데 http → https 로 변경합니다.#4시스템 매개 변수 변경한 후 새로고침하고 다시 확인해보니 정상적으로 api 문서가 보이게 됩니다." }, { "title": "Odoo 날짜 및 시간 형식을 변경하기", "url": "/posts/how-to-change-the-date-and-time-format/", "categories": "Odoo, docs", "tags": "odoo, views, widget", "date": "2022-10-26 18:00:00 +0900", "snippet": "오두 기본 필드 중 날짜(시간) 필드는 2개로 나눌 수 있습니다.날짜(년·월·일)만 저장하는 Date 타입과 시간(시·분·초)까지 저장하는 Datetime 타입이 있습니다.date = fields.Date() # YYYY-MM-DDdatetime = fields.Datetime() # YYYY-MM-DD HH:MM:SS날짜 포멧을 변경하는 방법위젯을 사용하는 방법Datetime 필드의 시·분·초를 제거하고 년·월·일까지만 나타내고 싶은 경우에는 위젯을 사용하여 제거할 수 있습니다.create_date, wirte_date 필드 모두 Datetime 필드지만 view 에서 widget=&quot;date&quot; 속성을 추가합니다.&amp;lt;field name=&quot;create_date&quot; widget=&quot;date&quot;/&amp;gt;&amp;lt;field name=&quot;write_date&quot;/&amp;gt;위젯을 사용한 결과를 확인해보면 작성일자의 경우 년·월·일까지만 표시되고, 최근 갱신 일자는 시·분·초까지 나타나게 됩니다.설정에서 변경하는 방법2022년 01월 01일 → 2022-01-01 처럼 자유롭게 날짜 표시 형식을 변경하고 싶은 경우에는 설정에서 변경할 수 있습니다.설정 &amp;gt; 번역하기 &amp;gt; 언어 로 이동합니다.⚠️ 기술 메뉴가 보이지 않을시 odoo debug 모드를 활성화합니다.사용중인 언어 항목을 클릭합니다.언어 정보를 보면 지원되는 날짜 및 시간 형식에 대한 규칙이 작성되어있습니다.해당 정보를 통해 날짜 형식이나 규칙을 변경할 수 있습니다.위 정보를 토대로 Date 필드의 경우 2022년 01월 01일(%Y년 %m월 %d일) → 2022-01-01(%Y-%m-%d) 로 날짜 형식 변경하고, DateTime 필드의 경우 00시 00분 00초(%H시 %M분 %초) → 00:00:00(%H:%M:%S) 로 변경하겠습니다.다시 결과를 확인해보면 설정에서 지정한 형식대로 날짜와 시간이 표시되는 걸 확인할 수 있습니다.형식만 변경하는 것이 아니라 년도를 제거하고 월·일만 표시하거나 초를 제거하고 시·분까지만 표시하는 것도 가능합니다.마치며, 🙇🏻참고한 사이트Youtube How To Change Date and Time Format in Odoo" }, { "title": "서버에서 앱 아이콘이 보이지 않는 경우", "url": "/posts/app-icon-not-showing-issue/", "categories": "Odoo, issue", "tags": "odoo, issue, server", "date": "2022-10-25 11:00:00 +0900", "snippet": "이슈서버 메인페이지에서 앱 아이콘들이 보이지 않는 경우에 대한 해결 방안입니다.해결 방안#1정상적으로 앱 아이콘 보이는 동일한 버전의 데이터베이스로 이동합니다.설정 &amp;gt; 기술 &amp;gt; 사용자 인터페이스 &amp;gt; 메뉴 항목 을 클릭합니다.⚠️  기술 메뉴가 보이지 않을시 odoo debug 모드를 활성화합니다.#2앱 아이콘이 보이지 않는 모듈명(판매)을 검색한 후 해당 메뉴 정보를 클릭합니다.정상적으로 앱 아이콘이 보이는 데이터베이스라면 웹 아이콘 이미지를 다운받을 수 있습니다.다운로드 버튼을 클릭하여 앱 아이콘을 다운받습니다.#3다운받은 파일을 확인해보면 판매 앱의 아이콘이 다운로드된 것을 확인할 수 있습니다.#4이제 다시 앱 아이콘이 보이지 않는 데이터베이스로 돌아와서 판매 메뉴 정보로 이동합니다.여기서는 웹 아이콘 이미지가 없는 걸 알 수 있는데 파일 업로드를 통해 아까 다운받은 이미지를 업로드합니다.#5메인화면으로 돌아와 새로고침을 해보면 정상적으로 앱 아이콘이 보이게 됩니다.마치며, 🙇🏻참고한 사이트Blog Odoo menu icons not showing issue" }, { "title": "사용자 2단계 인증(2FA) 비활성화하기", "url": "/posts/two-factor-authentication-disabled-for-user/", "categories": "Odoo, docs", "tags": "odoo, 2FA, 인증, 로그인", "date": "2022-01-22 09:00:00 +0900", "snippet": "Odoo에서는 OTP(One Time Password)를 사용한 2단계 인증(2FA)을 제공합니다.Odoo 공식 문서에 2단계 인증을 설정하는 방법은 있지만, OTP를 분실했을 경우에 2단계 인증을 비활성화할 수 있는 방법은 없어 따로 블로그에 정리를 하게 되었습니다.사용자 2단계 인증(2FA) 비활성화하기#1설정 &amp;gt; 사용자 및 회사 &amp;gt; 사용자 로 이동해 사용자 목록에서 2단계 인증을 비활성화할 사용자를 선택합니다. ✅#2조치를 클릭하면 여러 메뉴가 나타나는데, 그 중 Disable TOTP on users 메뉴를 클릭합니다.#32단계 인증 비활성화는 보안과 관련된 작업이기 때문에, 변경하기 위해서는 비밀번호를 입력해야 합니다.비밀번호를 입력하고, 비밀번호 확인 버튼을 클릭합니다.⚠️   여기서 입력하는 비밀번호는 데이터베이스 비밀번호가 아닌 현재 로그인한 사용자의 비밀번호입니다.#4정상적으로 2단계 인증이 비활성화 되었다면, 아래와 같이 선택한 유저의 2단계 인증을 비활성화했다는 메세지가 화면 오른쪽 상단에 나타나게 됩니다.Two-factor authentication disabled for user(s) &#39;&amp;lt;사용자 이메일&amp;gt;&#39;마치며, 🙇🏻참고한 사이트Odoo documentation 14.0 Two-factor Authentication" }, { "title": "DataGrip에서 Database 연결하기", "url": "/posts/connecting-db-to-datagrip/", "categories": "Database", "tags": "DataGrip, DB", "date": "2022-01-09 16:20:00 +0900", "snippet": "DataGrip 설치하기Jetbrains에서 DataGrip 프로그램을 설치 후 실행시킵니다.DB 연결하기#1좌측 상단에 + 버튼을 클릭 후 Data Source 를 선택 후 연결할 DB 종류를 선택합니다.(현재 Odoo에서는 PostgreSQL을 사용하고 있습니다.)#2 Name : Connection의 이름을 정합니다. Host : 접속할 서버의 ip 주소입니다. 개발 DB를 연결하는 경우 localhost로 설정하면 됩니다. User : 서버에 접속할 user 이름입니다. Password : user의 비밀번호입니다.입력을 마친 후 Test Connection 버튼을 클릭한 후 정상적으로 접속이 되었는지 테스트합니다.#3Connection 설정이 완료되면 해당 DB에서 우클릭 후 Database Tools - Manage Shown Schemas를 선택합니다.#4localhost에 있는 DB 중 연결할 DB만 따로 선택하거나 All databases를 체크하여 모두 연결합니다.#5이제 연결된 DB 리스트가 나오는데 schemas - public - tables에서 해당 DB의 테이블을 확인할 수 있습니다.테이블이 나타나지 않는다면 우클릭 후 Refresh를 클릭합니다." }, { "title": "MacOS에 Odoo 버전 14 설치하기", "url": "/posts/how-to-install-odoo-14-version/", "categories": "Odoo, docs", "tags": "odoo, ver 14.0", "date": "2022-01-03 02:30:00 +0900", "snippet": "2편 - ‘파이참(PyCharm)에 Odoo 환경 설정하기’이 글을 읽기 전!⚠️ MacOS를 기준으로 작성된 글입니다.회사에서 Odoo를 사용해 개발을 하게 되면서 처음 Odoo를 접하게 되었다.Odoo는 사용자가 그리 많지 않기 떄문에 딱 맞는 설치 가이드를 찾기 어렵다.때문에 나 또한 처음 설치 과정에서 많은 어려움을 겪었고, 블로그에 정리해 놓으면 좋겠다는 생각이 들어 정리하게 되었다.홈브루(Homebrew)홈브루를 통해 Odoo를 실행하는데 필요한 데이터베이스와 파이썬 가상 환경 패키지들을 설치한다.홈브루가 설치되어 있지 않다면, 아래 링크를 따라 설치 후 진행한다.👉 MacOS에서 홈브루(Homebrew) 설치하기postgresql 설치Odoo에서는 데이터베이스로 PostgreSQL을 사용한다. 필요에 따라 다른 버전을 사용해도 되지만, 10 이후 버전을 사용해야 한다.$ brew install postgresql$ brew install postgresql@11⚠️ brew install postgresql 명령어는 추후 psycopg2 라이브러리 설치 시, postgresql 바이너리를 찾지 못해 오류가 발생하기 때문에 추가로 설치한다.👉 홈브루에 다른 postgresql 버전 보기pyenv 설치pyenv는 로컬에서 다양한 Python 버전을 사용할 수 있도록 해서 Python 버전에 대한 의존성을 해결할 수 있다.$ brew install pyenv환경 변수 설정bash를 사용하는 경우, ~/.zshrc 대신 ~/.bashrc로 변경해 명령어를 실행한다.$ echo &#39;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#39; &amp;gt;&amp;gt; ~/.zshrc$ echo &#39;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#39; &amp;gt;&amp;gt; ~/.zshrc$ echo &#39;eval &quot;$(pyenv init --path)&quot;&#39; &amp;gt;&amp;gt; ~/.zshrc$ echo &#39;eval &quot;$(pyenv init -)&quot;&#39; &amp;gt;&amp;gt; ~/.zshrcpyenv-virtualenvvirtualenv는 로컬에서 다양한 Python 환경을 사용할 수 있도록 한다.$ brew install pyenv-virtualenv환경 변수 설정bash를 사용하는 경우, ~/.zshrc 대신 ~/.bashrc로 변경해 명령어를 실행한다.$ echo &#39;eval &quot;$(pyenv virtualenv-init -)&quot;&#39; &amp;gt;&amp;gt; ~/.zshrc$ echo &#39;export PYENV_VIRTUALENV_DISABLE_PROMPT=1&#39; &amp;gt;&amp;gt; ~/.zshrcOdoo 설치소스 코드 다운로드Odoo 버전 14에 소스 코드를 clone 받아, 헷갈리지 않도록 디렉토리 이름을 odoo-14으로 지정한다.$ git clone -b 14.0 --single-branch https://github.com/odoo/odoo odoo-14파이썬 세팅파이썬 3.8.5 버전을 사용한다. 꼭 3.8.5 버전이 아닌 3.8대 버전을 사용하면 된다.$ pyenv install 3.8.5가상 환경 생성clone 받은 odoo-14 디렉토리 경로로 이동해, odoo-14-venv라는 이름으로 파이썬 가상 환경을 생성한다.$ pyenv virtualenv 3.8.5 {가상환경명}$ pyenv virtualenv 3.8.5 odoo-14-venv가상 환경이 생성되었다면, odoo-14 디렉토리 경로 접근 시에 odoo-14-venv 가상 환경을 사용하도록 local 명령어를 사용해 가상 환경을 지정한다.$ pyenv local {가상환경명}$ pyenv local odoo-14-venv⚠️ 가상 환경 지정 후, 파이썬 버전을 확인해 가상 환경이 올바르게 생성되었는지 확인한다.설정한 3.8.5 버전과 다른 버전이 출력된다면 pyenv 또는 pyenv-virtualenv 환경 변수가 잘못 설정된 것으로 수정해야 한다.$ python -VPython 3.8.5pip 설치pip를 통해 Odoo를 실행하는데 필요한 패키지를 설치한다.$ pip install -r requirements.txt🚨 설치 도중 psycopg2 라이브러리에서 오류가 난다면, 먼저 1번째 명령어를 입력해보고 그래도 같은 오류가 난다면 2번째 명령어를 입력한다.# 1번째$ LDFLAGS=-L/usr/local/opt/openssl/lib pip install psycopg2==2.8.5# 2번째$ brew install openssl$ export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/opt/openssl/lib/$ LDFLAGS=-L/usr/local/opt/openssl/lib pip install psycopg2==2.8.5Odoo 환경 설정.odoorc 생성odoo에 관한 환경 설정은 .odoorc 파일에 정의해 사용한다.아래 명령어를 실행하면 Home 디렉토리에 .odoorc 파일이 생성된다.$ python ./odoo-bin --save.odoorc 가져오기Home 디렉토리에 생성된 .odoorc 파일을 odoo-14 디렉토리에 config 디렉토리로 이동시킨다.config 디렉토리가 없다면 생성한다.$ mv ~/.odoorc ./config/디렉토리 구조는 아래와 같이 된다.|-- odoo-14| ├── addons| ├── config| │   └── .odoorc| ├── debian| ├── doc// 일부 생략.odoorc 수정.odoorc 파일에서 아래 목록에 경로들이 odoo-14 디렉토리의 경로와 다르다면 지금 설치하고자 하는 odoo-14 디텍토리의 경로로 수정한다. addons_path Odoo 모듈이 담긴 경로 data_dir session 등 데이터 저장 경로 logfile log 파일 경로 → 디렉토리, 파일이 없다면 생성한다.addons_path = {odoo-14 path}/odoo/addonsdata_dir = {odoo-14 path}/configlogfile = {odoo-14 path}/config/log/odooserver.logCommunity 버전일 경우, addons_path를 아래와 같이 수정한다.addons_path = {odoo-14 path}/odoo/addons, {odoo-14 path}/addons디렉토리 구조는 아래와 같이 된다.|-- odoo-14| ├── addons| ├── config| │   └── log| │   │   ├── odooserver.log| │   └── .odoorc| ├── debian| ├── doc// 일부 생략Odoo 실행postgresql 실행홈브루를 통해 설치한 postgresql을 실행시킨다. 🐘$ brew services start postgresql@11Odoo 실행아래와 같이 명령어를 입력하면 Odoo가 실행된다.$ python ./odoo-bin --config=./config/.odoorc🚨 macOS로 Monterey를 사용 중이라면 실행 시 ValueError: current limit exceeds maximum limit가 발생하는데, 위 명령어 대신 아래 명령어를 통해 Odoo를 실행시키면 된다.$ python ./odoo-bin --config=./config/.odoorc --limit-memory-hard 0localhost:8069에 접속했을 때, 아래와 같은 페이지가 나타나면 Odoo 설치 성공이다! ✌️마치며, 🙇🏻참고한 사이트Odoo documentation 14.0 Install" }, { "title": "PyCharm에 Odoo 환경 설정하기", "url": "/posts/how-to-configure-odoo-with-pycharm/", "categories": "Odoo, docs", "tags": "odoo, PyCharm, configuration", "date": "2022-01-02 07:30:00 +0900", "snippet": "사용하는 odoo 버전에 따라서 설치를 진행하면 된다.1편 - ‘MacOS에 Odoo 버전 13 설치하기’1편 - ‘MacOS에 Odoo 버전 14 설치하기’1편에서는 Terminal에 명령어를 입력해 Odoo를 실행했는데, PyCharm에 Configuration을 설정하면 버튼 하나로 Odoo를 실행할 수 있다.파이썬 Interpreter 설정하기#1상단 메뉴에서 PyCharm, Preferences를 클릭하면, 환경설정 창이 나타난다.(또는 ⌘, 단축키를 사용할 수 있다.)#2환경설정 창에서 Project: [프로젝트명], Python Interpreter를 클릭한다.(또는 검색창에 interpreter를 검색하면 쉽게 찾을 수 있다.)#3인터프리터를 설정하지 않아서 No interpreter로 나타난다.#4No interpreter, Show All...을 클릭하면 모든 인터프리터 목록이 나타난다.#5목록에 1편에서 생성한 가상 환경이 없다면 + 버튼을 클릭하고, 만약 있다면 #7로 이동한다.#6Existing environment의 Interpreter를 보면 자동으로 해당 프로젝트에서 사용하는 pvenv 경로를 찾아 지정해주는데, 만약 경로가 다르다면 직접 지정하고 OK 버튼을 클릭한다.#7위에서 추가한 odoo-13-venv이 인터프리터 목록에 추가되었다! 사용할 인터프리터로 odoo-13-venv를 선택하고, OK 버튼을 클릭한다.#8No interpreter에서 선택한 인터프리터로 변경되었다. OK 버튼을 클릭해 파이썬 Interpreter 설정을 완료한다.Configuration 설정하기#9우측 상단에 ADD CONFIGURATION...을 클릭하면, Configuration 창이 나타난다.#10Configuration을 생성하기 위해 + 버튼을 클릭한다.#11Python을 선택한다.#12Script path를 쉽게 지정하기 위해 📁 아이콘을 클릭하면 파인더가 나타난디.#13파인더에서 해당 프로젝트의 odoo-bin 스크립트를 선택하고, Open 버튼을 클릭한다.#14Parameter에 --config=./config/.odoorc 를 입력하고, Python Interpreter에 위에서 설정한 interpreter가 지정되었는지 확인한다.Log 설정하기#15Logs 탭으로 이동해 + 버튼을 클릭하면, Log를 추가하는 창이 나타난다.#16Log File Location을 쉽게 지정하기 위해 📁 아이콘을 클릭하면 파인더가 나타난다.#17파인더에서 log 파일을 선택한다. 만약 log 파일이 없다면 생성한다.#18Alias에 사용할 Log 명칭을 입력하고, OK 버튼을 클릭한다.#19OK 버튼을 클릭하면 Configuration 설정이 완료된다.#20Configuration을 설정했더니 설정하기 전과는 다르게 아이콘들이 활성화되었다.이제 Debug 버튼을 클릭하기만 하면 Odoo를 실행할 수 있다! 🐛Log가 안보일 경우#21Debug 버튼을 클릭해 Odoo를 실행하면 하단에 여러 탭이 나타나는데 그 중 log 탭을 클릭한다.#22아래처럼 아무것도 나오지 않는다면 ?warnings으로 설정되어 있는지 확인한다.#23warning에서 all로 변경한다.#24Log가 나타난다." }, { "title": "Many2one 위젯을 상속받아, 목록 변경하기", "url": "/posts/changing-many2one-widget-list/", "categories": "Odoo, javascript", "tags": "odoo, ver 14.0, many2one, widget, 상속", "date": "2021-09-08 06:20:00 +0900", "snippet": "문제 상황요구사항에 맞춰 LOT/일련번호가 일련번호 - 수량 형식으로 나타나도록 변경했습니다.현재 방식은 _name_get 메소드를 사용해 record를 대표하는 이름을 변경한 방식으로, LOT/일련번호 form 뷰에서도 일련번호 - 수량 형식으로 나타납니다.class ProductionLot(models.Model): _inherit = &#39;stock.production.lot&#39; def name_get(self): result = [] for lot in self: name = &#39;%s - %sEA&#39; % (lot.name, str(int(lot.product_qty))) result.append((lot.id, name)) return result이렇게 적용한 방식은 수량을 함께 보고 싶지 않더라도, 다른 LOT/일련번호 필드를 사용하는 곳에 모두 동일하게 적용되기 때문에 적합한 방식은 아닙니다.해결 방안아래 사진처럼 목록에서만 일련번호 - 수량EA 형식으로 보여지고, 목록에서 선택했을 때는 일련번호만 보여지도록 변경합니다.1. Many2one 위젯 상속Many2one 위젯에서 _search 함수를 상속받습니다._search 함수는 Many2one 위젯에 입력한 검색어와 일치하는 목록을 조회하고, 나타내는 함수입니다.odoo.define(&#39;sale_management_ssk.field_many2one_lot&#39;, function (require) { &#39;use strict&#39;; const FieldRegistry = require(&#39;web.field_registry&#39;); const FieldMany2One = require(&#39;web.relational_fields&#39;).FieldMany2One; const FieldMany2OneLot = FieldMany2One.extend({ _search: async function (searchValue = &quot;&quot;) { /* code */ } }); // custom 위젯 등록 FieldRegistry.add(&#39;many2one_lot&#39;, FieldMany2OneLot);});2. 일련번호, 수량 조회기존 코드name_search 메소드를 사용해 입력한 검색어와 일치하는 레코드의 name을 조회합니다.const nameSearch = this._rpc({ model: this.field.relation, method: &quot;name_search&quot;, kwargs: { name: value, args: domain, operator: &quot;ilike&quot;, limit: this.limit + 1, context, }});커스텀 코드name_search 메소드가 아난 search_read 메소드를 사용해 검색어와 일치하는 레코드를 찾고, name과 product_qty를 조회합니다.const nameSearch = this._rpc({ model: this.field.relation, method: &#39;search_read&#39;, fields: [&#39;name&#39;, &#39;product_qty&#39;], domain: [...domain, [&#39;name&#39;, &#39;ilike&#39;, value]], limit: this.limit + 1, context: context,});3. 목록에 나타내기return을 살펴보면 id, label, value, name의 객체로 이루어져 있습니다.여기서 label이 목록에서 보여질 값이므로, label에만 일련번호 - 수량EA 형식으로 정의한 displayName 변수를 지정합니다.const nameSearch = this._rpc({ model: this.field.relation, method: &#39;search_read&#39;, fields: [&#39;name&#39;, &#39;product_qty&#39;], domain: [...domain, [&#39;name&#39;, &#39;ilike&#39;, value]], limit: this.limit + 1, context: context,});const results = await this.orderer.add(nameSearch);// Format results to fit the options dropdownlet values = results.map((result) =&amp;gt; { const {id, name, product_qty} = result; const fullName = `${name} - ${product_qty.toLocaleString()}EA`; // 일련번호 - 수량EA const displayName = this._getDisplayName(fullName).trim(); result[1] = displayName; return { id, label: displayName || data.noDisplayContent, // * 목록에 보여질 값 value: name, name: name, // * 목록에서 선택 시, 결과로 들어갈 값 };});" }, { "title": "Odoo 바코드(Barcode) 생성하기", "url": "/posts/how-to-create-barcode/", "categories": "Odoo, docs", "tags": "odoo, barcode, QR code", "date": "2021-09-01 07:00:00 +0900", "snippet": "텍스트로 barcode와 QRcode 생성하는 방법에 대한 글입니다.Barcode 생성방법&amp;lt;img t-att-src=&quot;&#39;/report/barcode/?type=%s&amp;amp;amp;value=%s&#39; % (&#39;EAN13&#39;, quote_plus(barcode.barcode_text or &#39;&#39;))&quot;/&amp;gt;Type지정한 타입 별로 바코드가 정의됩니다.Type List Codabar Code11 Code128 EAN13 EAN8 Extended39 Extended93 FIM I2of5 MSI POSTNET QR Standard39 Standard93 UPCA USPS_4StateValue바코드로 변환하려고 하는 값을 넣어줍니다.마치며, 🙇🏻참고한 사이트Odoo documentation 14.0 Barcodes" }, { "title": "Odoo 팝업(Popup) 생성하기", "url": "/posts/how-to-create-new-popup/", "categories": "Odoo, views", "tags": "odoo, views, popup, dialog", "date": "2021-08-27 11:00:00 +0900", "snippet": "팝업의 종류1. Confirm 팝업name 에 버튼 액션명을 지정하고 confirm 에 팝업에 표시할 메세지를 작성합니다.&amp;lt;button name=&quot;button_confirm&quot; type=&quot;object&quot; string=&quot;Button Confirm&quot; confirm=&quot;Confirm Message&quot;/&amp;gt;확인 버튼을 누르면 실행될 코드를 py 파일에 작성하는데 button이 작성된 view와 동일한 모델이여야 하며 함수명은 button에 name과 동일해야 합니다.def button_confirm(self): # 확인 버튼 클릭시 실행2. 오류 메세지 팝업xml에 버튼을 추가합니다.&amp;lt;button name=&quot;button_error&quot; type=&quot;object&quot; string=&quot;Button Error&quot;/&amp;gt;오류 메세지에도 종류가 많기 때문에 상황에 따른 오류 메세지를 사용합니다.from odoo.exceptions import UserError, ValidationError, AccessError, MissingError, CacheMiss, RedirectWarning, AccessDenieddef button_error(self): raise UserError(_(&quot;Error Message&quot;)) UserError : 사용자 오류 ValidationError : 유효성검사 오류 AccessError : 접근 에러 MissingError : 누락된 레코드 CacheMiss : 캐시 누락 RedirectWarning : 리디렉션 경고 AccessDenied : 접근 거부3. 사용자 정의 팝업내가 원하는 동작을 하기 위한 팝업을 생성합니다.&amp;lt;button name=&quot;button_function&quot; type=&quot;object&quot; string=&quot;Button Function&quot;/&amp;gt;팝업창에 대한 정보를 반환합니다.def button_function(self): return { &#39;name&#39;: _(&#39;SSK Order&#39;), &#39;type&#39;: &#39;ir.actions.act_window&#39;, &#39;view_mode&#39;: &#39;form&#39;, &#39;res_model&#39;: &#39;ssk.order&#39;, &#39;view_id&#39;: self.env.ref(&#39;ssk.ssk_order_view&#39;).id, &#39;target&#39;: &#39;new&#39;, } name : 팝업 이름 view_mode : 보기 유형 res_model : 사용할 모델 view_id : 팝업 화면 이름마치며, 🙇🏻참고한 사이트Odoo documentation 14.0 Actions - Window ActionsBlog Raising Exceptions in Odoo 13" }, { "title": "Odoo PDF 보고서(report) 생성하기", "url": "/posts/how-to-create-new-report-to-print/", "categories": "Odoo, views", "tags": "odoo, views, report, PDF", "date": "2021-08-27 08:00:00 +0900", "snippet": "Odoo 의 보고서는 인쇄 버튼을 생성하여 보고서를 추가하지 않고 해당 모델에 보고서를 만들면 자동으로 인쇄 버튼이 생성됩니다.보고서 생성module/report/report.xml 파일을 생성하여 보고서를 생성해주세요.&amp;lt;record id=&quot;report_ssk&quot; model=&quot;ir.actions.report&quot;&amp;gt; &amp;lt;field name=&quot;name&quot;&amp;gt;SSK Report&amp;lt;/field&amp;gt; &amp;lt;field name=&quot;model&quot;&amp;gt;ssk.order&amp;lt;/field&amp;gt; &amp;lt;field name=&quot;report_type&quot;&amp;gt;qweb-pdf&amp;lt;/field&amp;gt; &amp;lt;field name=&quot;report_name&quot;&amp;gt;ssk.report_ssk_template&amp;lt;/field&amp;gt; &amp;lt;field name=&quot;report_file&quot;&amp;gt;ssk.report_ssk_template&amp;lt;/field&amp;gt; &amp;lt;field name=&quot;binding_model_id&quot; ref=&quot;model_ssk_order&quot;/&amp;gt; &amp;lt;field name=&quot;binding_type&quot;&amp;gt;report&amp;lt;/field&amp;gt;&amp;lt;/record&amp;gt; name : 보고서 이름 model : 출력할 데이터가 있는 모델명 report_type : 데이터 출력 형식 (pdf, html, text) report_name : 다음으로 호출할 report 템플릿명보고서 템플릿 생성module/report/report_template.xml 파일을 생성하여 보고서 템플릿을 작성해주세요.&amp;lt;template id=&quot;report_ssk_template&quot;&amp;gt; &amp;lt;t t-foreach=&quot;docs&quot; t-as=&quot;o&quot;&amp;gt; &amp;lt;t t-call=&quot;web.html_container&quot;&amp;gt; &amp;lt;t t-call=&quot;web.external_layout&quot;&amp;gt; &amp;lt;div class=&quot;page&quot;&amp;gt; &amp;lt;h2&amp;gt;&amp;lt;span t-field=&quot;o.name&quot;/&amp;gt;&amp;lt;/h2&amp;gt; &amp;lt;div&amp;gt; &amp;lt;strong&amp;gt;Price: &amp;lt;/strong&amp;gt; &amp;lt;span t-field=&quot;o.expected_price&quot;/&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/t&amp;gt; &amp;lt;/t&amp;gt; &amp;lt;/t&amp;gt;&amp;lt;/template&amp;gt; &amp;lt;t t-call=&quot;web.html_container&quot;&amp;gt; 다른 곳에 작성되어있는 템플릿을 호출하여 사용합니다. &amp;lt;t t-call=&quot;web.external_layout&quot;&amp;gt; 템플릿 레이아웃을 지정하는데 external_layout 은 머리글과 바닥글이 있고, internal_layout은 머리말과 꼬리말이 있으며, basic_layout은 아무것도 없는 빈 레이아웃을 나타냅니다. &amp;lt;div class=&quot;page&quot;&amp;gt; 템플릿 작성을 위해 html 을 작성할 때 해당 클래스 안에서 작성하는 것이 좋습니다. &amp;lt;span t-field=&quot;o.name&quot;/&amp;gt; 데이터를 출력할 필드명을 작성합니다.추가 기능지금까지는 최소한의 간단한 보고서를 생성하는 방법이었습니다.보고서의 스타일을 적용하거나 용지 형식을 변경하는 추가적인 기능을 적용하는 방법을 알아보겠습니다.스타일 적용module/static/src/css/style.css 파일을 생성한 후 스타일을 작성해주세요.report_template.xml 에 css 파일을 연결하는 코드를 작성해주세요.&amp;lt;template id=&quot;assets_common&quot; name=&quot;ssk assets&quot; inherit_id=&quot;web.report_assets_common&quot;&amp;gt; &amp;lt;xpath expr=&quot;.&quot; position=&quot;inside&quot;&amp;gt; &amp;lt;link href=&quot;/ssk/static/src/css/style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&amp;gt; &amp;lt;/xpath&amp;gt;&amp;lt;/template&amp;gt;스타일이 적용되지 않을 경우 &amp;lt;div class=&quot;page&quot;&amp;gt; 안에 작성되었는지 확인해주세요.용지 형식module/report/paperformat.xml 파일을 생성하여 용지 형식을 작성해주세요.&amp;lt;record id=&quot;paperformat_ssk&quot; model=&quot;report.paperformat&quot;&amp;gt; &amp;lt;field name=&quot;name&quot;&amp;gt;A4 SSK&amp;lt;/field&amp;gt; &amp;lt;field name=&quot;default&quot; eval=&quot;True&quot;/&amp;gt; &amp;lt;field name=&quot;format&quot;&amp;gt;A4&amp;lt;/field&amp;gt; &amp;lt;field name=&quot;page_height&quot;&amp;gt;0&amp;lt;/field&amp;gt; &amp;lt;field name=&quot;page_width&quot;&amp;gt;0&amp;lt;/field&amp;gt; &amp;lt;field name=&quot;orientation&quot;&amp;gt;Portrait&amp;lt;/field&amp;gt; &amp;lt;field name=&quot;margin_top&quot;&amp;gt;10&amp;lt;/field&amp;gt; &amp;lt;field name=&quot;margin_bottom&quot;&amp;gt;14&amp;lt;/field&amp;gt; &amp;lt;field name=&quot;margin_left&quot;&amp;gt;7&amp;lt;/field&amp;gt; &amp;lt;field name=&quot;margin_right&quot;&amp;gt;7&amp;lt;/field&amp;gt; &amp;lt;field name=&quot;header_line&quot; eval=&quot;False&quot;/&amp;gt; &amp;lt;field name=&quot;header_spacing&quot;&amp;gt;0&amp;lt;/field&amp;gt;&amp;lt;/record&amp;gt; name : 보고서 용지 형식 이름 format : 용지 형식 (A0 ~ A9, B0 ~ B10 등) orientation : 세로 (Portrait), 가로 (Landscape) page_ : 페이지 치수 (mm) margin_ : 여백 크기 (mm)머리글, 바닥글external_layout 또는 internal_layout 을 사용하여 머리글과 바닥글을 추가할 수 있지만 다른 형식의 머리글과 바닥글을 추가하고 싶을 때 직접 작성하여 사용합니다.report_template.xml 에 바닥글 템플릿을 작성해주세요.&amp;lt;template id=&quot;report_ssk_footer&quot;&amp;gt; &amp;lt;div class=&quot;footer&quot;&amp;gt; &amp;lt;div class=&quot;text-left ft&quot;&amp;gt; &amp;lt;span&amp;gt;SSK-QF61-04&amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;text-center ft&quot;&amp;gt; &amp;lt;span t-field=&quot;o.company_id&quot;/&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;text-right ft&quot;/&amp;gt; &amp;lt;/div&amp;gt;&amp;lt;/template&amp;gt;&amp;lt;div class=&quot;page&quot;&amp;gt; 태그가 끝나는 아래에 바닥글 템플릿을 호출하여 연결해주세요. &amp;lt;div class=&quot;page&quot;&amp;gt; ... 생략 &amp;lt;/div&amp;gt; &amp;lt;t t-call=&quot;maintenance_ssk.report_equipment_history_card_footer&quot;/&amp;gt;&amp;lt;/template&amp;gt;마치며, 🙇🏻참고한 사이트Odoo documentation 14.0 QWeb ReportsOdoo documentation 14.0 Advanced J: PDF ReportsYoutube Create a New Report to Print" }, { "title": "Odoo에서 번역 추가 및 변경하기", "url": "/posts/how-to-add-and-edit-translation/", "categories": "Odoo, i18n", "tags": "odoo, i18n, 번역", "date": "2021-08-27 07:00:00 +0900", "snippet": "번역을 위한 String 작성기존 모듈 번역 추가 및 변경기존 모듈 필드에 string과 함께 변경 시 아래와 같은 방법으로 string을 작성합니다.attribute 속성으로 string을 추가합니다.&amp;lt;xpath expr=&quot;//field[@name=&#39;location_id&#39;]&quot; position=&#39;attributes&#39;&amp;gt; &amp;lt;attribute name=&quot;string&quot;&amp;gt;Source Location&amp;lt;/attribute&amp;gt;&amp;lt;/xpath&amp;gt;커스텀 모듈 번역 추가 및 변경새로 생성하는 필드에 경우 필드에 아래와 같은 방법으로 string을 작성합니다.&amp;lt;xpath expr=&quot;//field[@name=&#39;payment_term_id&#39;]&quot; position=&#39;before&#39;&amp;gt; &amp;lt;field name=&quot;delivery_date&quot; string=&quot;Expected Delivery Date&quot;/&amp;gt;&amp;lt;/xpath&amp;gt;번역 작성번역번역 작성 방법은 아래와 같습니다.번역 작성 시 주석 작성은 필수입니다.공통주석#. module: 변경하려고 하는 필드 view가 작성된 module명#: model_terms: ir.ui.view,arch_db: {module명}.{view id}번역msgid: string 작성msgstr: 번역 내용#. module: sale_management_ssk#: model_terms:ir.ui.view,arch_db:sale_management_ssk.view_picking_formmsgid &quot;Source Location&quot;msgstr &quot;출고 위치&quot;Selection Item주석#: model:ir.model.fields,field_description: {module명}.field_{selection 필드명}__{selection item명}#. module: barcodes_ssk#: model:ir.model.fields,field_description:barcodes_ssk.field_barcode_partner__barcode_type#: model_terms:ir.ui.view,arch_db:barcodes_ssk.product_template_form_viewmsgid &quot;Barcode Type&quot;msgstr &quot;바코드 구분&quot;Report Name주석#: model:ir.actions.report,name: {module명}.{report id명}#. module: stock#: model:ir.actions.report,name:barcodes_ssk.barcode_partner_template_pdfmsgid &quot;Barcode Partner (PDF)&quot;msgstr &quot;고객 바코드 (PDF)&quot;QWeb주석#. openerp-web#: code: {xml 파일 경로}:0#, python-format#. module: purchase_ssk#. openerp-web#: code:addons/purchase_ssk/static/src/xml/purchase_sale_view.xml:0#, python-formatmsgid &quot;Sale Order Number&quot;msgstr &quot;판매 주문 번호&quot;마치며, 🙇🏻참고한 사이트Odoo documentation 14.0 Translating Modules" }, { "title": "Odoo의 뷰(View) 상속에 대해 알아보기", "url": "/posts/changing-existing-views-view-inheritance/", "categories": "Odoo, views", "tags": "odoo, ver 13.0, views, 상속", "date": "2021-08-27 06:00:00 +0900", "snippet": "View 상속 (Inheritance)Odoo에서는 기존에 정의된 view를 상속받아 변경할 수 있습니다.view 상속inherit_id에 상속받고자 하는 뷰를 {module 명}.{뷰 ID} 형식으로 정의합니다.상속받고자 하는 뷰가 같은 module 내에 있다면 module 명을 적어주지 않아도 되지만, 헷갈리지 않도록 module 명을 함께 정의하는 것이 좋습니다.res.partner의 tree 뷰를 상속받고자 하는 경우, 아래와 같이 코드를 작성할 수 있습니다.&amp;lt;record id=&quot;view_partner_tree&quot; model=&quot;ir.ui.view&quot;&amp;gt; &amp;lt;field name=&quot;model&quot;&amp;gt;res.partner&amp;lt;/field&amp;gt; &amp;lt;field name=&quot;inherit_id&quot; ref=&quot;base.view_partner_tree&quot;/&amp;gt; &amp;lt;field name=&quot;arch&quot; type=&quot;xml&quot;&amp;gt; &amp;lt;/field&amp;gt;&amp;lt;/record&amp;gt;field 상속xpath 태그의 name 속성에는 기준이 되는 field를 정의하고, position 속성에는 변경하는 방법을 정의합니다.email 필드 다음에 github 필드를 새로 추가하고자 하는 경우, 아래와 같이 코드를 작성할 수 있습니다.&amp;lt;xpath name=&quot;//field[@name=&#39;email&#39;]&quot; position=&quot;after&quot;&amp;gt; &amp;lt;field name=&quot;github&quot;/&amp;gt;&amp;lt;/xpath&amp;gt;position 속성 inside (default) 기준이 되는 필드에 새로운 필드를 추가합니다. replace 기준이 되는 필드를 새로운 필드로 교체합니다. after 기준이 되는 필드 다음에 새로운 필드를 추가합니다. before 기준이 되는 필드 이전에 새로운 필드를 추가합니다. attributes 기준이 되는 필드에 속성을 변경합니다. move 기준이 되는 필드를 이동합니다.position=”attributes” 예제position 속성 중 attributes 속성이 가장 많이 사용됩니다.attributes 속성을 사용해 필드를 안보이도록 하거나, string을 변경하거나, 수정이 불가능하게 변경하는 등 다양하게 사용할 수 있습니다.1. String을 변경하는 경우&amp;lt;record id=&quot;view_order_form&quot; model=&quot;ir.ui.view&quot;&amp;gt; &amp;lt;field name=&quot;name&quot;&amp;gt;sale.order.form.inherit.sale_management_ssk&amp;lt;/field&amp;gt; &amp;lt;field name=&quot;model&quot;&amp;gt;sale.order&amp;lt;/field&amp;gt; &amp;lt;field name=&quot;inherit_id&quot; ref=&quot;sale.view_order_form&quot;/&amp;gt; &amp;lt;field name=&quot;arch&quot; type=&quot;xml&quot;&amp;gt; &amp;lt;xpath expr=&quot;//button[@name=&#39;action_confirm&#39;][last()]&quot; position=&quot;attributes&quot;&amp;gt; &amp;lt;attribute name=&quot;string&quot;&amp;gt;Order Confirm&amp;lt;/attribute&amp;gt; &amp;lt;/xpath&amp;gt; &amp;lt;/field&amp;gt;&amp;lt;/record&amp;gt;2. 관리자만 볼 수 있도록 변경하는 경우&amp;lt;record id=&quot;view_partner_property_form&quot; model=&quot;ir.ui.view&quot;&amp;gt; &amp;lt;field name=&quot;model&quot;&amp;gt;res.partner&amp;lt;/field&amp;gt; &amp;lt;field name=&quot;inherit_id&quot; ref=&quot;account.view_partner_property_form&quot;/&amp;gt; &amp;lt;field name=&quot;arch&quot; type=&quot;xml&quot;&amp;gt; &amp;lt;xpath expr=&quot;//group[@name=&#39;fiscal_information&#39;]&quot; position=&quot;attributes&quot;&amp;gt; &amp;lt;attribute name=&quot;groups&quot;&amp;gt;base.group_erp_manager&amp;lt;/attribute&amp;gt; &amp;lt;/xpath&amp;gt; &amp;lt;/field&amp;gt;&amp;lt;/record&amp;gt;3. 특정 항목만 보이도록 변경하는 경우&amp;lt;record id=&quot;product_supplierinfo_form_view&quot; model=&quot;ir.ui.view&quot;&amp;gt; &amp;lt;field name=&quot;model&quot;&amp;gt;product.supplierinfo&amp;lt;/field&amp;gt; &amp;lt;field name=&quot;inherit_id&quot; ref=&quot;product.product_supplierinfo_form_view&quot;/&amp;gt; &amp;lt;field name=&quot;arch&quot; type=&quot;xml&quot;&amp;gt; &amp;lt;xpath expr=&quot;//field[@name=&#39;name&#39;]&quot; position=&quot;attributes&quot;&amp;gt; &amp;lt;attribute name=&quot;domain&quot;&amp;gt;[(&#39;supplier_rank&#39;,&#39;=&#39;,&#39;1&#39;)]&amp;lt;/attribute&amp;gt; &amp;lt;/xpath&amp;gt; &amp;lt;/field&amp;gt;&amp;lt;/record&amp;gt;마치며, 🙇🏻참고한 사이트Odoo documentation 14.0 Views - InheritanceOdoo 14 Development Cookbook Changing existing views – view inheritanceYoutube Inherit and add new fields in existing views" }, { "title": "Odoo의 모델(Model) 상속에 대해 알아보기", "url": "/posts/changing-existing-models-model-inheritance/", "categories": "Odoo, models", "tags": "odoo, ver 13.0, models, 상속", "date": "2021-08-26 13:23:00 +0900", "snippet": "Model 상속 및 확장 (Inheritance and extension)Odoo는 3가지 유형의 상속을 제공합니다. 클래스 상속 (Class inheritance) 프로토타입 상속 (Prototype inheritance) 위임 상속 (Delegation inheritance)클래스 상속 (Class inheritance)클래스 상속은 기존 모델을 확장하는 상속으로, 가장 많이 사용되는 방식입니다. 기존 모델에 새로운 필드를 추가하거나, 메소드를 수정하는 경우에 사용됩니다._inherit 속성에 상속받을 모델 명을 정의합니다.새로운 필드 추가res.partner 모델에 Github 아이디 필드를 추가하고자 하는 경우, 아래와 같이 코드를 작성할 수 있습니다.from odoo import fields, modelsclass ResPartner(models.Model): _inherit = &#39;res.partner&#39; github = fields.Char(string=&#39;Github Username&#39;)기존 메소드 수정모델에 레코드가 삭제될 때, unlink 메소드가 실행됩니다.res.partner 모델에서 user_id가 연결된 레코드 삭제 시, 사용자에게 경고 메세지를 나타내고 싶은 경우에 아래와 같이 코드를 작성할 수 있습니다.from odoo import fields, models, _from odoo.exceptions import UserErrorclass ResPartner(models.Model): _inherit = &#39;res.partner&#39; def unlink(self): for partner in self: if partner.user_id: raise UserError(_(&#39;You cannot delete if have a connected User.&#39;)) return super(ResPartner, self).unlink()프로토타입 상속 (Prototype inheritance)기존 모델에 정의를 복사해 새로운 모델을 생성하는 경우에 사용됩니다._inherit 속성에는 복사할 모델 명을 정의하고, _name 속성에는 복사된 새로운 모델 명을 정의합니다.from odoo import fields, modelsclass ResPartner(models.Model): _name = &#39;res.partner.copy&#39; _inherit = &#39;res.partner&#39;위임 상속 (Delegation inheritance)⚠️ _inherit 속성 대신 _inherits 속성을 사용합니다. (s의 차이)res.staff 모델에 res.partner 모델의 데이터 구조를 포함한 중복 데이터 구조가 생성됩니다.from odoo import fields, modelsclass ResPartner(models.Model): _name = &#39;res.staff&#39; _inherits = {&#39;res.partner&#39;: &#39;partner_id&#39;} partner_id = fields.Many2one(&#39;res.partner&#39;, ondelete=&#39;cascade&#39;)마치며, 🙇🏻참고한 사이트Odoo documentation 14.0 ORM API - Inheritance and extensionOdoo 14 Development Cookbook Adding features to a model using inheritance" }, { "title": "그룹에 따라 Selection 필드 변경하기", "url": "/posts/changing-selection-fields-based-on-group/", "categories": "Odoo, views", "tags": "odoo, views, selection", "date": "2021-07-01 23:10:00 +0900", "snippet": "특정 그룹 (사용자, 관리자)에 따라 선택 필드를 감추는 방법에 대한 글입니다.로그인한 유저가 사용자 또는 관리자일 경우에 따라 보여지는 선택 필드를 변경합니다.기본적인 선택 필드의 사용방법은 아래와 같습니다.number = fields.Selection([(&#39;one&#39;, &#39;One&#39;), (&#39;two&#39;, &#39;Two&#39;)], string=&quot;number&quot;)함수 정의함수를 호출하여 값을 채우기 위해 @api.model을 사용합니다.@api.modeldef _get_seleciton(self): selection = [ (&#39;one&#39;, &#39;One&#39;), (&#39;two&#39;, &#39;Two&#39;) ]return selection함수 호출함수를 정의했으니 함수를 호출하는 필드를 작성합니다.selection=_get_selection에서 작성해둔 함수를 호출합니다.selc = fields.Selection(string=&quot;number&quot;, selection=_get_selection, default=&quot;one&quot;)조건이제 그룹에 따라 다른 선택 필드를 표시합니다.has_group 을 사용하여 유저가 해당 그룹에 속하는 지 확인하고, 그룹에 속할 경우 필드가 추가되어 사용자와는 다른 선택 필드가 보여집니다.@api.modeldef _get_selection(self): selection = [(&#39;one&#39;, &#39;One&#39;), (&#39;two&#39;, &#39;Two&#39;)] if self.env[&#39;res.users&#39;].has_group(&#39;base.group_erp_manager&#39;): selection += [ (&#39;three&#39;, &#39;Three&#39;), (&#39;four&#39;, &#39;Four&#39;) ] return selectionview 에 추가화면에 나타내기 위해 xml 에서 field 를 추가합니다.widget=&quot;radio&quot; 속성을 부여하여 라디오 버튼 형식으로 선택이 가능한 필드가 완성되었습니다.&amp;lt;field name=&quot;selc&quot; widget=&quot;radio&quot; string=&quot;number&quot;/&amp;gt;마치며, 🙇🏻참고한 사이트Blog How to show selection values based on groups" }, { "title": "기존(Core) 모듈 번역 덮어씌우기", "url": "/posts/how-to-override-module-translation/", "categories": "Odoo, i18n", "tags": "odoo, ver 13.0, i18n, 상속, 번역", "date": "2021-07-01 22:10:00 +0900", "snippet": "문제 상황커스텀 모듈을 생성해 해당 모듈의 번역 파일에서 새로운 번역을 추가하고, 기존 번역을 수정했다.커스텀 모듈(stock_ssk)의 새로운 번역 추가 : 매출 문서#. module: stock_ssk#: model_terms:ir.ui.view,arch_db:stock_ssk.view_picking_formmsgid &quot;Sale Source Document&quot;msgstr &quot;매출 문서&quot;기존 모듈(stock)의 번역 수정 : 유효성 검사 → 입고/출고 처리#. module: stock#: model_terms:ir.ui.view,arch_db:stock.view_picking_formmsgid &quot;Validate&quot;msgstr &quot;입고/출고 처리&quot;문제는 커스텀 모듈 설치 시, 새롭게 추가된 번역인 매출 문서는 정상적으로 적용되었지만, 기존 번역인 유효성 검사를 입고/출고 처리로 수정한 건 적용되지 않았다.기존 번역을 수정한 사항을 적용하기 위해서는 설정 → 번역하기 → 번역 가져오기 에서 번역 파일을 Import 해주는 방법이 있지만, 새롭게 데이터베이스를 생성할 때마다 기존 번역 파일을 Import 해주는 방법은 번거로워 커스텀 모듈 설치 시에 기존 번역 수정 사항을 적용하는 방법을 알고싶었다.해결 방안생각보다 아주 간단하지만, 왠지 바로 적용이 안되서 헤매었다.Odoo 실행 시, parameter에 --i18n-overwrite 옵션을 사용하면 된다.⚠️   반드시 -u module_name으로 업데이트할 모듈 옵션과 함께 사용해야 한다.$ python odoo-bin --config=./config/.odoorc --i18n-overwrite -u module_name여러 모듈일 경우, 아래와 같이 사용한다.$ python odoo-bin --config=./config/.odoorc --i18n-overwrite -u module_name1,module_name2,module_name3마치며, 🙇🏻참고한 사이트Odoo documentation 14.0 Command-line interface (CLI)Odoo forum How to override a module translation?" }, { "title": "관리자만 수정이 가능하도록 View 변경하기", "url": "/posts/how-to-set-field-editable-for-group-in-odoo/", "categories": "Odoo, views", "tags": "odoo, ver 13.0, views, 상속", "date": "2021-07-01 00:50:00 +0900", "snippet": "문제 상황관리자만 볼 수 있게, 관리자만 수정할 수 있게, 관리자만 선택할 수 있게 … 등 관리자가 아니라도 특정 사용자만 가능하도록 하고 싶은 경우가 있다.그 중 사용자에 따라 보여지고, 숨겨지고를 가장 많이 사용하는데 groups 속성을 사용하면 해당 그룹의 사용자만 필드를 볼 수 있도록 설정할 수 있다.ex) base.group_erp_manager 그룹에 사용자만 vat 필드를 볼 수 있다.&amp;lt;field name=&quot;vat&quot; groups=&quot;base.group_erp_manager&quot;/&amp;gt;문제는 관리자만 필드 수정이 가능하고 그 외 사용자는 수정이 불가능해야 하는데, groups 속성으로는 특정 그룹에 사용자만 필드 수정이 가능하도록 설정할 수 없다.해결 방안방법1. field 추가사용자가 관리자 그룹임을 체크하는 필드를 생성해, view에서 해당 필드를 활용해 사용자가 관리자 그룹임을 판단한다.model(python)is_admin = fields.Boolean(&#39;Is Admin&#39;, compute=&#39;_compute_is_admin&#39;)def _compute_is_admin(self): if SUPERUSER_ID == self._uid: self.is_admin = True else: self.is_admin = Falseview(xml)&amp;lt;field name=&quot;is_admin&quot; invisible=&quot;1&quot;/&amp;gt;&amp;lt;field name=&quot;vat&quot; attrs=&quot;{&#39;readonly&#39;: [(&#39;is_admin&#39;, &#39;!=&#39;, True)]}&quot;/&amp;gt;방법2. view 수정기본적으로 모든 사용자가 필드를 수정하지 못하도록 readonly를 True로 설정한다. &amp;lt;record id=&quot;view_template_form_A&quot; model=&quot;ir.ui.view&quot;&amp;gt; &amp;lt;field name=&quot;name&quot;&amp;gt;product.template.inherit.readonly&amp;lt;/field&amp;gt; &amp;lt;field name=&quot;model&quot;&amp;gt;product.template&amp;lt;/field&amp;gt; &amp;lt;field name=&quot;inherit_id&quot; ref=&quot;product.view_template_form&quot;/&amp;gt; &amp;lt;field name=&quot;arch&quot; type=&quot;xml&quot;&amp;gt; &amp;lt;xpath expr=&quot;//field[@name=&#39;vat&#39;]&quot; position=&quot;attributes&quot;&amp;gt; &amp;lt;attribute name=&quot;readonly&quot;&amp;gt;True&amp;lt;/attribute&amp;gt; &amp;lt;/xpath&amp;gt; &amp;lt;/field&amp;gt;&amp;lt;/record&amp;gt;groups_id 속성을 사용해 해당 그룹의 사용자만 해당 view를 사용하도록 할 수 있다.base.group_erp_manager 그룹의 사용자만 view가 적용되기 때문에, readonly를 False로 설정한다. &amp;lt;record id=&quot;view_template_form_B&quot; model=&quot;ir.ui.view&quot;&amp;gt; &amp;lt;field name=&quot;name&quot;&amp;gt;product.template.inherit.editable&amp;lt;/field&amp;gt; &amp;lt;field name=&quot;model&quot;&amp;gt;product.template&amp;lt;/field&amp;gt; &amp;lt;field name=&quot;groups_id&quot; ref=&quot;[(6, 0, [ref(&#39;base.group_erp_manager&#39;)])]&quot;/&amp;gt; &amp;lt;field name=&quot;inherit_id&quot; ref=&quot;custom_product.view_template_form_A&quot;/&amp;gt; &amp;lt;field name=&quot;arch&quot; type=&quot;xml&quot;&amp;gt; &amp;lt;xpath expr=&quot;//field[@name=&#39;vat&#39;]&quot; position=&quot;attributes&quot;&amp;gt; &amp;lt;attribute name=&quot;readonly&quot;&amp;gt;False&amp;lt;/attribute&amp;gt; &amp;lt;/xpath&amp;gt; &amp;lt;/field&amp;gt;&amp;lt;/record&amp;gt;마치며, 🙇🏻참고한 사이트Odoo forum How to set a field editable only for a group in odoo9Odoo forum How to make field readonly except administrative user in odoo" }, { "title": "MacOS에 Odoo 버전 13 설치하기", "url": "/posts/how-to-install-odoo-13-version/", "categories": "Odoo, docs", "tags": "odoo, ver 13.0", "date": "2021-06-06 20:20:00 +0900", "snippet": "2편 - ‘파이참(PyCharm)에 Odoo 환경 설정하기’이 글을 읽기 전!⚠️ MacOS를 기준으로 작성된 글입니다.회사에서 Odoo를 사용해 개발을 하게 되면서 처음 Odoo를 접하게 되었다.Odoo는 사용자가 그리 많지 않기 떄문에 딱 맞는 설치 가이드를 찾기 어렵다.때문에 나 또한 처음 설치 과정에서 많은 어려움을 겪었고, 🥲   블로그에 정리해 놓으면 좋겠다는 생각이 들어 정리하게 되었다.홈브루(Homebrew)홈브루를 통해 Odoo를 실행하는데 필요한 데이터베이스와 파이썬 가상 환경 패키지들을 설치한다.홈브루가 설치되어 있지 않다면, 아래 링크를 따라 설치 후 진행한다.👉 MacOS에서 홈브루(Homebrew) 설치하기postgresql 설치Odoo에서는 데이터베이스로 PostgreSQL을 사용한다.⚠️ 필요에 따라 다른 버전을 사용해도 되지만, 10 버전 이후 버전을 사용해야 한다.$ brew install postgresql@11👉 홈브루에 다른 postgresql 버전 보기pyenv 설치pyenv는 로컬에서 다양한 Python 버전을 사용할 수 있도록 해서 Python 버전에 대한 의존성을 해결할 수 있다.$ brew install pyenv환경 변수 설정bash를 사용하는 경우, ~/.zshrc 대신 ~/.bashrc로 변경해 명령어를 실행한다.$ echo &#39;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#39; &amp;gt;&amp;gt; ~/.zshrc$ echo &#39;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#39; &amp;gt;&amp;gt; ~/.zshrc$ echo &#39;eval &quot;$(pyenv init --path)&quot;&#39; &amp;gt;&amp;gt; ~/.zshrc$ echo &#39;eval &quot;$(pyenv init -)&quot;&#39; &amp;gt;&amp;gt; ~/.zshrcpyenv-virtualenvvirtualenv는 로컬에서 다양한 Python 환경을 사용할 수 있도록 한다.$ brew install pyenv-virtualenv환경 변수 설정bash를 사용하는 경우, ~/.zshrc 대신 ~/.bashrc로 변경해 명령어를 실행한다.$ echo &#39;eval &quot;$(pyenv virtualenv-init -)&quot;&#39; &amp;gt;&amp;gt; ~/.zshrc$ echo &#39;export PYENV_VIRTUALENV_DISABLE_PROMPT=1&#39; &amp;gt;&amp;gt; ~/.zshrcOdoo 설치소스 코드 다운로드Odoo 버전 13에 소스 코드를 clone 받아, 헷갈리지 않도록 디렉토리 이름을 odoo-13으로 지정한다.$ git clone -b 13.0 --single-branch https://github.com/odoo/odoo odoo-13파이썬 세팅파이썬 3.7.6 버전을 사용한다. 꼭 3.7.6 버전이 아닌 3.7대 버전을 사용하면 된다.$ pyenv install 3.7.6가상 환경 생성clone 받은 odoo-13 디렉토리 경로로 이동해, odoo-13-venv라는 이름으로 파이썬 가상 환경을 생성한다.$ pyenv virtualenv 3.7.6 {가상환경명}$ pyenv virtualenv 3.7.6 odoo-13-venv가상 환경이 생성되었다면, odoo-13 디렉토리 경로 접근 시에 odoo-13-venv 가상 환경을 사용하도록 local 명령어를 사용해 가상 환경을 지정한다.$ pyenv local {가상환경명}$ pyenv local odoo-13-venv⚠️ 가상 환경 지정 후, 파이썬 버전을 확인해 가상 환경이 올바르게 생성되었는지 확인한다.설정한 3.7.6 버전과 다른 버전이 출력된다면 pyenv 또는 pyenv-virtualenv 환경 변수가 잘못 설정된 것이로 수정해야 한다.$ python -VPython 3.7.6pip 설치pip를 통해 Odoo를 실행하는데 필요한 패키지를 설치한다.$ pip install -r requirements.txt🚨 설치 도중 Pillow 패키지에서 오류가 난다면 pip 버전을 업그레이드한 후에 다시 진행한다.$ pip install --upgrade pipOdoo 환경 설정.odoorc 생성odoo에 관한 환경 설정은 .odoorc 파일에 정의해 사용한다.아래 명령어를 실행하면 Home 디렉토리에 .odoorc 파일이 생성된다.$ python ./odoo-bin --save.odoorc 가져오기Home 디렉토리에 생성된 .odoorc 파일을 odoo-13 디렉토리에 config 디렉토리로 이동시킨다.config 디렉토리가 없다면 생성한다.$ mv ~/.odoorc ./config/디렉토리 구조는 아래와 같이 된다.|-- odoo-13| ├── addons| ├── config| │   └── .odoorc| ├── debian| ├── doc// 일부 생략.odoorc 수정.odoorc 파일에서 아래 목록에 경로들이 odoo-13 디렉토리의 경로와 다르다면 지금 설치하고자 하는 odoo-13 디텍토리의 경로로 수정한다. addons_path Odoo 모듈이 담긴 경로 data_dir session 등 데이터 저장 경로 logfile log 파일 경로 → 디렉토리, 파일이 없다면 생성한다.addons_path = {odoo-13 path}/odoo/addonsdata_dir = {odoo-13 path}/configlogfile = {odoo-13 path}/config/log/odooserver.logCommunity 버전일 경우, addons_path를 아래와 같이 수정한다.addons_path = {odoo-13 path}/odoo/addons, {odoo-13 path}/addons디렉토리 구조는 아래와 같이 된다.|-- odoo-13| ├── addons| ├── config| │   └── log| │   │   ├── odooserver.log| │   └── .odoorc| ├── debian| ├── doc// 일부 생략Odoo 실행postgresql 실행홈브루를 통해 설치한 postgresql을 실행시킨다. 🐘$ brew services start postgresql@11Odoo 실행아래와 같이 명령어를 입력하면 Odoo가 실행된다.$ python ./odoo-bin --config=./config/.odoorc🚨 실행 시 아래와 같이 오류가 나타난다면 psycopg2-binary 패키지를 설치한 후에 다시 진행한다./Users/parkbohee/.pyenv/versions/odoo-13-venv/lib/python3.7/site-packages/psycopg2/__init__.py:144: UserWarning: The psycopg2 wheel package will be renamed from release 2.8; in order to keep installing from binary please use &quot;pip install psycopg2-binary&quot; instead. For details see: &amp;lt;http://initd.org/psycopg/docs/install.html#binary-install-from-pypi&amp;gt;. &quot;&quot;&quot;)$ pip install psycopg2-binarylocalhost:8069에 접속했을 때, 아래와 같은 페이지가 나타나면 Odoo 설치 성공이다! ✌️마치며, 🙇🏻참고한 사이트https://www.odoo.com/documentation/13.0/setup/install.html#mac-os" } ]
